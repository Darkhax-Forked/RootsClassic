import net.neoforged.gradle.common.tasks.PotentiallySignJar
plugins {
  id 'java-library'
  id 'eclipse'
  id 'idea'
  id 'maven-publish'
  id 'net.neoforged.gradle.userdev' version '7.0.163'
}

version = "${mc_version}-${mod_version}"
group = "elucent.roots" // http://maven.apache.org/guides/mini/guide-naming-conventions.html
base {
  archivesName = "RootsClassic"
}

// Mojang ships Java 21 to end users in 1.20.5+, so your mod should target Java 21.
java.toolchain.languageVersion = JavaLanguageVersion.of(21)

minecraft.accessTransformers.file rootProject.file('src/main/resources/META-INF/accesstransformer.cfg')
//minecraft.accessTransformers.entry public net.minecraft.client.Minecraft textureManager # textureManager

runs {
  // applies to all the run configs below
  configureEach { net.neoforged.gradle.dsl.common.runs.run.Run run ->
    // Recommended logging data for a userdev environment
    systemProperty 'forge.logging.markers', 'REGISTRIES'

    // Recommended logging level for the console
    systemProperty 'forge.logging.console.level', 'debug'

    //Limit ram usage for the dev environment to 4GB
    jvmArgument '-Xmx4G'

    if (run.project.javaToolchains.launcherFor(java.toolchain).map { it.metadata.vendor }.getOrElse("").contains("JetBrains")) {
      run.jvmArgument("-XX:+AllowEnhancedClassRedefinition")
    }

    modSource project.sourceSets.main
  }

  client {
    // Comma-separated list of namespaces to load gametests from. Empty = all namespaces.
    systemProperty 'forge.enabledGameTestNamespaces', "${mod_id}"
  }

  server {
    systemProperty 'forge.enabledGameTestNamespaces', "${mod_id}"
    programArgument '--nogui'
  }

  data {
    // example of overriding the workingDirectory set in configureEach above, uncomment if you want to use it
    // workingDirectory project.file('run-data')

    // Specify the modid for data generation, where to output the resulting resource, and where to look for existing resources.
    programArguments.addAll '--mod', "${mod_id}", '--all', '--output', file('src/generated/resources/').getAbsolutePath(), '--existing', file('src/main/resources/').getAbsolutePath()
  }
}

// Include resources generated by data generators.
sourceSets.main.resources { srcDir 'src/generated/resources' }

configurations {
  runtimeClasspath.extendsFrom localRuntime
}

repositories {

  //flatDir { dir 'libs' } 
  maven {
    // location of the maven that hosts JEI files since January 2023
    name = "Jared's maven"
    url = "https://maven.blamejared.com/"
  }
  maven {
    name = "OctoStudios - curios continuation"
    url = uri("https://maven.octo-studios.com/releases")
  }
  maven { url = 'https://modmaven.dev'  }
  maven { url = 'https://www.cursemaven.com'  }
}

dependencies {
  implementation "net.neoforged:neoforge:${neo_version}"

  compileOnly "mezz.jei:jei-${mc_version}-common-api:${jei_version}"
  compileOnly "mezz.jei:jei-${mc_version}-neoforge-api:${jei_version}"

  runtimeOnly "mezz.jei:jei-${mc_version}-neoforge:${jei_version}"

  implementation "com.blamejared.crafttweaker:CraftTweaker-neoforge-${mc_version}:${crafttweaker_version}"

  compileOnly "top.theillusivec4.curios:curios-neoforge:${curios_version}"
  runtimeOnly "top.theillusivec4.curios:curios-neoforge:${curios_version}"

  compileOnly "vazkii.patchouli:Patchouli:${patchouli_version}"
  localRuntime "vazkii.patchouli:Patchouli:${patchouli_version}"

// implementation "blank:flib-1.20.1:${flib_version}")
//    implementation "curse.maven:flib-661261:${flib_file}"
}

// Example for how to get properties into the manifest for reading by the runtime..
tasks.named('jar', Jar).configure {
    manifest {
        attributes([
                'Specification-Title'     : mod_id,
                'Specification-Vendor'    : "Lothrazar",
                'Specification-Version'   : '1', // We are version 1 of ourselves
                'Implementation-Title'    : project.name,
                'Implementation-Version'  : project.jar.archiveVersion,
                'Implementation-Vendor'   : "Lothrazar",
                'Implementation-Timestamp': new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
}

publishing {
    publications {
        register('mavenJava', MavenPublication) {
            artifact jar
        }
    }
    repositories {
        maven {
            url "file://${project.projectDir}/mcmodsrepo"
        }
    }
}

task signJar(type: net.neoforged.gradle.common.tasks.PotentiallySignJar, dependsOn: jar) {
    keyStore = project.findProperty('keyStore')
    alias = project.findProperty('keyStoreAlias')
    storePass = project.findProperty('keyStorePass')
    keyPass = project.findProperty('keyStoreKeyPass')
    input = jar.archivePath
    output = jar.archivePath
}

task cleanJar {
  delete 'build/libs'
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8' // Use the UTF-8 charset for Java compilation
}

// IDEA no longer automatically downloads sources/javadoc jars for dependencies, so we need to explicitly enable the behavior.
idea {
    module {
        downloadSources = true
        downloadJavadoc = true
    }
}

